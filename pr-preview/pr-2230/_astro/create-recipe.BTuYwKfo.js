import{a as p,u as f,s as d,b as C,c as h,d as y,e as b,f as $,w}from"./css.DfFBB4Zv.js";function g(t,n){let r={};return t.forEach(e=>{Object.entries(e).every(([s,a])=>s==="css"?!0:(Array.isArray(a)?a:[a]).some(c=>n[s]===c))&&(r=p(r,e.css))}),r}function j(t,n,r,e){if(n.length>0&&typeof r?.[e]=="object")throw new Error(`[recipe:${t}:${e}] Conditions are not supported when using compound variants.`)}function m(){let t="",n=0,r;for(;n<arguments.length;)(r=arguments[n++])&&typeof r=="string"&&(t&&(t+=" "),t+=r);return t}const M=(t,n,r)=>{const e=s=>({[t]:"__ignore__",...n,...C(s)});return Object.assign((s,a=!0)=>{const c=y({conditions:{shift:b,finalize:$,breakpoints:{keys:["base","sm","md","lg","xl","2xl"]}},utility:{prefix:"pando",toHash:(i,o)=>o(i.join(":")),transform:(i,o)=>(j(t,r,s,i),o==="__ignore__"?{className:t}:(o=w(o),{className:`${t}--${i}_${o}`}))}}),_=e(s);if(a){const i=g(r,_);return m(c(_),h(i))}return c(_)},{__getCompoundVariantCss__:s=>g(r,e(s))})},v=(t,n)=>{if(t&&!n)return t;if(!t&&n)return n;const r=(...s)=>m(t(...s),n(...s)),e=f(t.variantKeys,n.variantKeys),u=e.reduce((s,a)=>(s[a]=f(t.variantMap[a],n.variantMap[a]),s),{});return Object.assign(r,{__recipe__:!0,__name__:`${t.__name__} ${n.__name__}`,raw:s=>s,variantKeys:e,variantMap:u,splitVariantProps(s){return d(s,e)}})};export{M as a,m as c,v as m};
