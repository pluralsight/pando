"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8926],{81509:(e,t,n)=>{n.d(t,{dS:()=>s,fK:()=>o,C9:()=>p,ZP:()=>d});var a=n(70079),i=n(88660);const l={linkList:"linkList_sLwJ",linkItem:"linkItem_ESvF"};function r(e){return a.createElement("li",{className:l.linkItem},a.createElement(i.Z,e,e.children))}function o(e){return a.createElement(r,{href:e.href},e.children??"View on Github")}function s(e){return a.createElement(r,{href:e.href},"View on Figma")}function p(e){return a.createElement("ul",{className:l.linkList},e.children)}function d(e){const{figma:t,github:n}=e;return a.createElement("ul",{className:l.linkList},n&&a.createElement(o,{href:n}),t&&a.createElement(s,{href:t}))}},66794:(e,t,n)=>{n(70079)},88660:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(70079),i=n(60047),l=n(26078),r=n(20394),o=n(32042);function s(e){const{href:t}=e,n=(0,l.L)({ariaHidden:!0,size:"s"}),s=t.includes("github")?r.Z:o.Z;return a.createElement(i.TextLink,e,a.createElement(s,n),e.children)}},41339:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>d});var a=n(3262),i=(n(70079),n(38570)),l=n(81509);n(66794);const r={tags:["field","search","date picker","password"],title:"Input"},o=void 0,s={unversionedId:"reference/components/input",id:"reference/components/input",title:"Input",description:"Used to collect form field information.",source:"@site/docs/reference/components/input.mdx",sourceDirName:"reference/components",slug:"/reference/components/input",permalink:"/docs/reference/components/input",draft:!1,editUrl:"https://github.com/pluralsight/pando/edit/main/website/docs/reference/components/input.mdx",tags:[{label:"field",permalink:"/docs/tags/field"},{label:"search",permalink:"/docs/tags/search"},{label:"date picker",permalink:"/docs/tags/date-picker"},{label:"password",permalink:"/docs/tags/password"}],version:"current",lastUpdatedBy:"Kathy Lavoie",frontMatter:{tags:["field","search","date picker","password"],title:"Input"},sidebar:"reference",previous:{title:"Icon",permalink:"/docs/reference/components/icon"},next:{title:"Menu",permalink:"/docs/reference/components/menu"}},p={},d=[{value:"Import",id:"import",level:2},{value:"Anatomy",id:"anatomy",level:2},{value:"Usage",id:"usage",level:2},{value:"Valid Example",id:"valid-example",level:3},{value:"Invalid Example",id:"invalid-example",level:3},{value:"Date Picker",id:"date-picker",level:3},{value:"What about <code>type=&quot;date&quot;</code>?",id:"what-about-typedate",level:4},{value:"Password Input",id:"password-input",level:3},{value:"Sizes",id:"sizes",level:3},{value:"Customizing",id:"customizing",level:3},{value:"1. Unused Classes",id:"1-unused-classes",level:4},{value:"2. Passing a <code>className</code> prop",id:"2-passing-a-classname-prop",level:4},{value:"3. Ejected Input",id:"3-ejected-input",level:4},{value:"Behavior",id:"behavior",level:2},{value:"Patterns",id:"patterns",level:3},{value:"Usage",id:"usage-1",level:3},{value:"API",id:"api",level:2},{value:"Parameters",id:"parameters",level:3},{value:"Size Mapping",id:"size-mapping",level:3},{value:"Accessibility",id:"accessibility",level:2}],m={toc:d},u="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",{className:"size-xxl"},"Used to collect form field information."),(0,i.kt)(l.C9,{mdxType:"DocsLinkList"},(0,i.kt)(l.fK,{href:"https://github.com/pluralsight/pando/tree/main/packages/react/src/components/Input.tsx",mdxType:"DocsGithubLink"}),(0,i.kt)(l.fK,{href:"https://github.com/pluralsight/pando/tree/main/packages/headless-styles/src/components/Input/inputCSS.ts",mdxType:"DocsGithubLink"},"View Core API"),(0,i.kt)(l.dS,{href:"https://www.figma.com/file/ZmH4XsZS5WnKeo28ylM5x1/Pando-UI-kit-(Web)?node-id=1214%3A50560&t=YLA3FBYLefNvfeuf-0",mdxType:"DocsFigmaLink"})),(0,i.kt)("h2",{id:"import"},"Import"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Input } from '@pluralsight/react'\n")),(0,i.kt)("h2",{id:"anatomy"},"Anatomy"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Form Control"),(0,i.kt)("li",{parentName:"ol"},"Label"),(0,i.kt)("li",{parentName:"ol"},"Input"),(0,i.kt)("li",{parentName:"ol"},"Message")),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("h3",{id:"valid-example"},"Valid Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function ValidInputExample() {\n  const formId = \'email\'\n  const [email, setEmail] = useState(\'\')\n\n  function handleChange(e) {\n    setEmail(e.target.value)\n  }\n\n  return (\n    <FormControlProvider>\n      <Label htmlFor="email">Email</Label>\n      <Input\n        describedBy="email:help"\n        id="email"\n        name="email"\n        onChange={handleChange}\n        placeholder="email@example.com"\n        type="email"\n        value={email}\n      />\n      <FieldMessage id="email:help">\n        We will never share your email.\n      </FieldMessage>\n    </FormControlProvider>\n  )\n}\n')),(0,i.kt)("h3",{id:"invalid-example"},"Invalid Example"),(0,i.kt)("p",null,"For invalid form fields, add the ",(0,i.kt)("inlineCode",{parentName:"p"},"invalid")," prop to the ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/components/form-control"},"FormControlProvider")," component and add an ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/components/field-message#error-message"},"ErrorMessage")," component."),(0,i.kt)("admonition",{title:"Easy form field states",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Since the ",(0,i.kt)("inlineCode",{parentName:"p"},"FormControlProvider")," manages the validity state of each form field, you don't have to worry about managing the child components as they will automatically update to reflect the current state.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function InvalidInputExample() {\n  const [email, setEmail] = useState(\'\')\n\n  function handleChange(e) {\n    setEmail(e.target.value)\n  }\n\n  return (\n    <FormControlProvider required={true} invalid={!email}>\n      <Label htmlFor="email">Email</Label>\n      <Input\n        describedBy="email:help"\n        id="email"\n        name="email"\n        onChange={handleChange}\n        placeholder="email@example.com"\n        type="email"\n        value={email}\n      />\n      <FieldMessage id="email:help">\n        We will never share your email.\n      </FieldMessage>\n      <ErrorMessage id="email:error">\n        Please enter an email address.\n      </ErrorMessage>\n    </FormControlProvider>\n  )\n}\n')),(0,i.kt)("h3",{id:"date-picker"},"Date Picker"),(0,i.kt)("p",null,"When you need to collect a ",(0,i.kt)("strong",{parentName:"p"},"known date"),", combine the Input with the ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/react-hooks/useAutoFormatDate"},"useAutoFormatDate")," custom hook."),(0,i.kt)("admonition",{title:"Calendar Pickers are not accessible",type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Calendar Pickers should only be used when the UX requires choosing a date that is ",(0,i.kt)("strong",{parentName:"p"},"unknown")," to the user."),(0,i.kt)("p",{parentName:"admonition"},"Check out the ",(0,i.kt)("a",{parentName:"p",href:"https://adrianroselli.com/2019/07/maybe-you-dont-need-a-date-picker.html"},"Maybe You Don't Need a Date Picker")," article for more information.")),(0,i.kt)("h4",{id:"what-about-typedate"},"What about ",(0,i.kt)("inlineCode",{parentName:"h4"},'type="date"'),"?"),(0,i.kt)("p",null,"Contrary to the rest of the HTML element APIs, the ",(0,i.kt)("inlineCode",{parentName:"p"},'type="date"')," option for an input is ",(0,i.kt)("strong",{parentName:"p"},"not accessible"),". This is a known issue in the community and forces fully accessible applications to use the ",(0,i.kt)("inlineCode",{parentName:"p"},"text")," value instead."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function DateInput(props) {\n  const formatOptions = useAutoFormatDate()\n\n  return (\n    <FormControlProvider>\n      <Input\n        {...formatOptions}\n        describedBy="date:help"\n        id="date"\n        name="date"\n        startIcon={CalendarIcon}\n        type="text"\n      />\n    </FormControlProvider>\n  )\n}\n')),(0,i.kt)("h3",{id:"password-input"},"Password Input"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function PasswordInput() {\n  const [show, setShow] = useState(false)\n  const [password, setPassword] = useState('')\n  const fieldWrapper = {\n    position: 'relative',\n  }\n  const btnStyle = {\n    position: 'absolute',\n    right: '0.3rem',\n    top: '0',\n    zIndex: '100',\n  }\n\n  function handleChange(e) {\n    setPassword(e.target.value)\n  }\n\n  function handleToggleShow() {\n    setShow((prev) => !prev)\n  }\n\n  return (\n    <FormControlProvider required={true} invalid={!password}>\n      <Label htmlFor=\"password\">Password</Label>\n      <div style={fieldWrapper}>\n        <Input\n          describedBy=\"password:error\"\n          id=\"password\"\n          name=\"password\"\n          onChange={handleChange}\n          placeholder=\"Enter your password\"\n          type={show ? 'text' : 'password'}\n          value={password}\n        />\n        <Show when={password} fallback={null}>\n          <IconButton\n            ariaLabel={show ? 'Hide password' : 'Show password'}\n            icon={show ? EyeIcon : EyeOffIcon}\n            onClick={handleToggleShow}\n            style={btnStyle}\n            usage=\"text\"\n          />\n        </Show>\n      </div>\n      <ErrorMessage id=\"password:error\">Please enter a password.</ErrorMessage>\n    </FormControlProvider>\n  )\n}\n")),(0,i.kt)("h3",{id:"sizes"},"Sizes"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},'function InputSizes() {\n  return (\n    <div>\n      <FormControlProvider readOnly={true}>\n        <Input id="mExample" name="mExample" value="Medium input" />\n      </FormControlProvider>\n      <br />\n      <FormControlProvider readOnly={true}>\n        <Input id="lExample" name="lExample" value="Large input" />\n      </FormControlProvider>\n    </div>\n  )\n}\n')),(0,i.kt)("h3",{id:"customizing"},"Customizing"),(0,i.kt)("p",null,"There are 3 ways to customize the Input component."),(0,i.kt)("h4",{id:"1-unused-classes"},"1. Unused Classes"),(0,i.kt)("p",null,"Each component layer of the Input has a unused class name that can be utilized in your local CSS to customize the Input at any level."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"pando-input"),": The element of the Input."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"pando-input-wrapper"),": The wrapper element of the Input."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"pando-input-start-icon"),": The start icon element of the Input."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"pando-input-invalid-icon"),": The invalid icon element of the Input.")),(0,i.kt)("h4",{id:"2-passing-a-classname-prop"},"2. Passing a ",(0,i.kt)("inlineCode",{parentName:"h4"},"className")," prop"),(0,i.kt)("p",null,"You can pass a ",(0,i.kt)("inlineCode",{parentName:"p"},"className")," prop to the Input component to customize the Input. This is useful if your project uses ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/css-modules/css-modules"},"CSS Modules")," or a CSS-in-JS library like ",(0,i.kt)("a",{parentName:"p",href:"https://emotion.sh/docs/introduction"},"Emotion"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript",metastring:'title="Example of using CSS Modules to customize the Input." showLineNumbers',title:'"Example',of:!0,using:!0,CSS:!0,Modules:!0,to:!0,customize:!0,the:!0,'Input."':!0,showLineNumbers:!0},"import customStyles from './customStyles.module.css'\n\nfunction CustomInput(props) {\n  return <Input className={customStyles.custom} {...props} />\n}\n")),(0,i.kt)("h4",{id:"3-ejected-input"},"3. Ejected Input"),(0,i.kt)("p",null,'For a low-level "ejected" approach, you can use the Headless-styles API to customize the Input however you prefer while keeping the accessibility behavior.'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"showLineNumbers",showLineNumbers:!0},"import {\n  getInputProps,\n  getStartIconProps,\n  getInvalidIconProps,\n  getInputWrapperProps,\n} from '@pluralsight/headless-styles'\n")),(0,i.kt)("p",null,"To learn more about the Headless-styles API, check out the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/pluralsight/pando/blob/main/packages/headless-styles/src/components/Input/inputCSS.ts"},"Headless-styles documentation"),"."),(0,i.kt)("h2",{id:"behavior"},"Behavior"),(0,i.kt)("h3",{id:"patterns"},"Patterns"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do")," use the WarningTriangleFilled Icon for all invalid input fields."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't")," use any other Icon to represent an invalid input field."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do")," stack form fields vertically when displaying a set."),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't")," use more than one form field within the same row."),(0,i.kt)("h3",{id:"usage-1"},"Usage"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Do"),' use the "(required)" text flag on all required form field labels.'),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Don't"),' use a "',"*",'" to represent a required field; this pattern is not accessible.'),(0,i.kt)("h2",{id:"api"},"API"),(0,i.kt)("h3",{id:"parameters"},"Parameters"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  describedBy?: string\n  id: string\n  name: string\n  size?: 'm' | 'l'\n  startIcon?: ElementType\n}\n")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"describedBy")," - The ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," of the FieldMessage or ErrorMessage that describes the input."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"id")," - The ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," of the input."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," - The ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," of the input."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"size")," - The size of the input."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"startIcon")," - The icon to display at the start of the input.")),(0,i.kt)("h3",{id:"size-mapping"},"Size Mapping"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="Input size rules."',title:'"Input',size:!0,'rules."':!0},"{\n  m: 'Use in condensed areas where the default size is too large.',\n  l: 'Should be used in most, if not all cases.'\n}\n")),(0,i.kt)("h2",{id:"accessibility"},"Accessibility"),(0,i.kt)("p",null,"The Pando Input is fully accessible and screen-readable through the following features:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"aria-invalid")," attribute is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," when the input is invalid."),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"aria-describedby")," attribute is set to the ",(0,i.kt)("inlineCode",{parentName:"li"},"id")," of the FieldMessage or ErrorMessage that describes the input."),(0,i.kt)("li",{parentName:"ol"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"aria-required")," attribute is set to ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," when the input is required.")))}c.isMDXComponent=!0}}]);