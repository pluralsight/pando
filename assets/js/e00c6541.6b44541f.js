"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5358],{80322:(e,t,n)=>{n.d(t,{Z:()=>r});var i=n(70079);const a={base:"base_M3w8",column:"column_mb9C base_M3w8",grid:"grid_EiLr base_M3w8"},o={alignItems:"center",column:!1,gridCols:0,justifyContent:"space-between",textAlign:"center",type:"base"};function r(e){void 0===e&&(e=o);const t=e.type??o.type,n=e.gridColumns?`repeat(${e.gridColumns}, minmax(auto, max-content))`:"initial",r={alignItems:e.alignItems,gridTemplateColumns:n,justifyContent:e.justifyContent,textAlign:e.textAlign??"center",gap:e.gap??"1rem",columnGap:e.columnGap};return i.createElement("div",{className:a[t],style:r},e.children)}},81509:(e,t,n)=>{n.d(t,{dS:()=>s,fK:()=>l,C9:()=>m,ZP:()=>d});var i=n(70079),a=n(88660);const o={linkList:"linkList_sLwJ",linkItem:"linkItem_ESvF"};function r(e){return i.createElement("li",{className:o.linkItem},i.createElement(a.Z,e,e.children))}function l(e){return i.createElement(r,{href:e.href},e.children??"View on Github")}function s(e){return i.createElement(r,{href:e.href},"View on Figma")}function m(e){return i.createElement("ul",{className:o.linkList},e.children)}function d(e){const{figma:t,github:n}=e;return i.createElement("ul",{className:o.linkList},n&&i.createElement(l,{href:n}),t&&i.createElement(s,{href:t}))}},66794:(e,t,n)=>{n(70079)},88660:(e,t,n)=>{n.d(t,{Z:()=>s});var i=n(70079),a=n(60047),o=n(26078),r=n(20394),l=n(32042);function s(e){const{href:t}=e,n=(0,o.L)({ariaHidden:!0,size:"s"}),s=t.includes("github")?r.Z:l.Z;return i.createElement(a.TextLink,e,i.createElement(s,n),e.children)}},60059:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>h,default:()=>y,frontMatter:()=>p,metadata:()=>f,toc:()=>k});var i=n(3262),a=n(70079),o=n(38570),r=n(81509),l=n(60047),s=n(80322);function m(){const{confirm:e}=(0,l.useConfirm)();return a.createElement(l.Button,{onClick:function(){e({bodyId:"non-destructiveAlert-body",headingId:"non-destructiveAlert-heading",heading:"Confirm payment",text:"Are you sure you want to make this payment?"})}},"Confirm payment")}const d=function(){return a.createElement(s.Z,null,a.createElement(l.ConfirmProvider,null,a.createElement(m,null)))};function c(){const{confirm:e}=(0,l.useConfirm)();return a.createElement(l.Button,{sentiment:"danger",onClick:function(){e({bodyId:"destructiveAlert-body",headingId:"destructiveAlert-heading",heading:"Delete payment method",kind:"destructive",text:"Are you sure you want to remove this payment method? This will be a permanent action."})}},"Confirm payment")}const u=function(){return a.createElement(s.Z,null,a.createElement(l.ConfirmProvider,null,a.createElement(c,null)))};n(66794);const p={tags:["alert","dialog","user confirmation"],title:"Confirm Dialog"},h=void 0,f={unversionedId:"reference/components/confirm-dialog",id:"reference/components/confirm-dialog",title:"Confirm Dialog",description:"Used to interrupt the user with a mandatory confirmation or action.",source:"@site/docs/reference/components/confirm-dialog.mdx",sourceDirName:"reference/components",slug:"/reference/components/confirm-dialog",permalink:"/docs/reference/components/confirm-dialog",draft:!1,editUrl:"https://github.com/pluralsight/pando/edit/main/website/docs/reference/components/confirm-dialog.mdx",tags:[{label:"alert",permalink:"/docs/tags/alert"},{label:"dialog",permalink:"/docs/tags/dialog"},{label:"user confirmation",permalink:"/docs/tags/user-confirmation"}],version:"current",lastUpdatedBy:"Kathy Lavoie",frontMatter:{tags:["alert","dialog","user confirmation"],title:"Confirm Dialog"},sidebar:"reference",previous:{title:"Circular Progress",permalink:"/docs/reference/components/circular-progress"},next:{title:"Field Messages",permalink:"/docs/reference/components/field-message"}},g={},k=[{value:"Import",id:"import",level:2},{value:"Anatomy",id:"anatomy",level:2},{value:"Usage",id:"usage",level:2},{value:"Non-destructive",id:"non-destructive",level:3},{value:"Destructive",id:"destructive",level:3},{value:"Customizing",id:"customizing",level:3},{value:"1. Unused Classes",id:"1-unused-classes",level:4},{value:"3. Ejected Confirm Dialog",id:"3-ejected-confirm-dialog",level:4},{value:"Behavior",id:"behavior",level:2},{value:"Patterns",id:"patterns",level:3},{value:"Usage",id:"usage-1",level:3},{value:"API",id:"api",level:2},{value:"<code>ConfirmProvider</code>",id:"confirmprovider",level:3},{value:"Paramters",id:"paramters",level:4},{value:"<code>useConfirm</code>",id:"useconfirm",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Accessibility",id:"accessibility",level:2}],C={toc:k},v="wrapper";function y(e){let{components:t,...n}=e;return(0,o.kt)(v,(0,i.Z)({},C,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",{className:"size-xxl"},"Used to interrupt the user with a mandatory confirmation or action."),(0,o.kt)(r.C9,{mdxType:"DocsLinkList"},(0,o.kt)(r.fK,{href:"https://github.com/pluralsight/pando/tree/main/packages/react/src/context/Confirm/context.tsx",mdxType:"DocsGithubLink"}),(0,o.kt)(r.fK,{href:"https://github.com/pluralsight/pando/tree/main/packages/headless-styles/src/components/AlertDialog/alertDialog.ts",mdxType:"DocsGithubLink"},"View Core API"),(0,o.kt)(r.dS,{href:"https://www.figma.com/file/ZmH4XsZS5WnKeo28ylM5x1/Pando-UI-kit-(Web)?node-id=1214%3A50560&t=YLA3FBYLefNvfeuf-0",mdxType:"DocsFigmaLink"})),(0,o.kt)("h2",{id:"import"},"Import"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { ConfirmProvider, useConfirm } from '@pluralsight/react'\n")),(0,o.kt)("h2",{id:"anatomy"},"Anatomy"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Dialog Container"),(0,o.kt)("li",{parentName:"ol"},"Header (optional)"),(0,o.kt)("li",{parentName:"ol"},"Heading (optional)"),(0,o.kt)("li",{parentName:"ol"},"Body"),(0,o.kt)("li",{parentName:"ol"},"Footer"),(0,o.kt)("li",{parentName:"ol"},"Cancel Button"),(0,o.kt)("li",{parentName:"ol"},"Confirm Button")),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("h3",{id:"non-destructive"},"Non-destructive"),(0,o.kt)("p",null,"Use a non-destructive Confirm Dialog when you need a confirmation that does not result in a permanent destructive behavior of the database."),(0,o.kt)("admonition",{title:"Use Toast for non-critical information",type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"If you need to interrupt the user with non-critical information, use a ",(0,o.kt)("a",{parentName:"p",href:"/docs/reference/components/toast"},"Toast")," instead. Confirm Dialogs should only be used for critical information which requires a user's confirmation and should be a rare use case.")),(0,o.kt)(d,{mdxType:"BasicConfirmDialog"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'showLineNumbers title="How to use the Confirm Dialog."',showLineNumbers:!0,title:'"How',to:!0,use:!0,the:!0,Confirm:!0,'Dialog."':!0},"import { Button, ConfirmProvider, useConfirm } from '@pluralsight/react'\n\nfunction PaymentFeature() {\n  const { confirm } = useConfirm()\n\n  async function handleShowAlert() {\n    try {\n      const consent = await confirm({\n        heading: 'Confirm payment',\n        text: 'Are you sure you want to make this payment?',\n      })\n\n      if (consent) {\n        // fetch request to make payment\n      }\n    } catch (error) {\n      // handle error\n    }\n  }\n\n  return <Button onClick={handleShowAlert}>Confirm payment</Button>\n}\n\nexport default function PaymentsPage() {\n  return (\n    <div>\n      <ConfirmProvider>\n        <PaymentFeature />\n      </ConfirmProvider>\n\n      <div>Some other content like a historical list of payments.</div>\n    </div>\n  )\n}\n")),(0,o.kt)("h3",{id:"destructive"},"Destructive"),(0,o.kt)("p",null,"When you need a confirmation from a user that will result in a destructive action, just add the ",(0,o.kt)("inlineCode",{parentName:"p"},"kind")," prop to the options with the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"destructive"),"."),(0,o.kt)(u,{mdxType:"DestructiveConfirmDialog"}),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'showLineNumbers title="How to use the Destructive Confirm Dialog." {12}',showLineNumbers:!0,title:'"How',to:!0,use:!0,the:!0,Destructive:!0,Confirm:!0,'Dialog."':!0,"{12}":!0},"import { Button, ConfirmProvider, useConfirm } from '@pluralsight/react'\n\nfunction PaymentFeature() {\n  const { confirm } = useConfirm()\n\n  async function handleShowAlert() {\n    try {\n      const consent = await confirm({\n        heading: 'Delete payment method',\n        kind: 'destructive',\n        text: 'Are you sure you want to remove this payment method? This will be a permanent action.',\n      })\n\n      if (consent) {\n        // fetch request to make payment\n      }\n    } catch (error) {\n      // handle error\n    }\n  }\n\n  return (\n    <Button sentiment=\"danger\" onClick={handleShowAlert}>\n      Confirm payment\n    </Button>\n  )\n}\n\nexport default function PaymentsPage() {\n  return (\n    <div>\n      <ConfirmProvider>\n        <PaymentFeature />\n      </ConfirmProvider>\n\n      <div>Some other content like a historical list of payments.</div>\n    </div>\n  )\n}\n")),(0,o.kt)("h3",{id:"customizing"},"Customizing"),(0,o.kt)("p",null,"You can customize the Confirm Dialog in the following ways:"),(0,o.kt)("h4",{id:"1-unused-classes"},"1. Unused Classes"),(0,o.kt)("p",null,"Each component layer of the Confirm has a unused class name that can be utilized in your local CSS to customize the Confirm at any level."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"pando-alert"),": The element of the Confirm Alert."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"pando-alert-header"),": The header element of the Alert."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"pando-alert-icon"),": The heading icon element of the Alert."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"pando-alert-heading"),": The heading element of the Alert."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"pando-alert-body"),": The content element of the Alert."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"pando-alert-footer"),": The footer element of the Alert."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"pando-alert-cancel"),": The cancel button element of the Alert."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"pando-alert-confirm"),": The confirm button element of the Alert.")),(0,o.kt)("h4",{id:"3-ejected-confirm-dialog"},"3. Ejected Confirm Dialog"),(0,o.kt)("p",null,'For a low-level "ejected" approach, you can use the Headless-styles API to customize the Confirm Alert however you prefer while keeping the accessibility behavior.'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript",metastring:"showLineNumbers",showLineNumbers:!0},"import {\n  getAlertDialogProps,\n  getAlertDialogHeaderProps,\n  getAlertDialogHeadingProps,\n  getAlertDialogBodyProps,\n  getAlertDialogFooterProps,\n} from '@pluralsight/headless-styles'\n")),(0,o.kt)("p",null,"To learn more about the Headless-styles API, check out the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/pluralsight/pando/blob/main/packages/headless-styles/src/components/AlertDialog/alertDialog.ts"},"Headless-styles documentation"),"."),(0,o.kt)("h2",{id:"behavior"},"Behavior"),(0,o.kt)("p",null,"Confirm dialogs are to be used to interrupt the user's task with important, critical, or warning information. This is the Pluralsight themed version of a browser's native ",(0,o.kt)("inlineCode",{parentName:"p"},"window.confirm()")," function."),(0,o.kt)("h3",{id:"patterns"},"Patterns"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Do")," use the Confirm Dialog when you need the user to confirm a decision."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Don't")," use the Modal when you need the user to confirm a decision."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Do")," keep Confirm Dialog layout unaltered."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Don't")," manipulate or add any additional elements/styles to the Confirm Dialog."),(0,o.kt)("h3",{id:"usage-1"},"Usage"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Do")," use sparingly in a user experience."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Don't")," abuse the use of this Dialog by using multiple times within a page."),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"confirmprovider"},(0,o.kt)("inlineCode",{parentName:"h3"},"ConfirmProvider")),(0,o.kt)("admonition",{title:"pitfall",type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ConfirmProvider")," should ",(0,o.kt)("strong",{parentName:"p"},"NOT")," be used at the top level of your application. It should be used at the top level of the feature that needs a Confirm Dialog for better performance.")),(0,o.kt)("h4",{id:"paramters"},"Paramters"),(0,o.kt)("h3",{id:"useconfirm"},(0,o.kt)("inlineCode",{parentName:"h3"},"useConfirm")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ContextProps {\n  confirm: (options: ConfirmDialogProps) => Promise<boolean>\n}\n\nfunction useConfirm(): ContextProps\n")),(0,o.kt)("h4",{id:"parameters"},"Parameters"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ConfirmDialogProps {\n  bodyId?: string\n  headingId?: string\n  heading?: string\n  kind?: 'non-destructive' | 'destructive'\n  text: string\n}\n")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"bodyId"),": The ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," of the body element of the Confirm Dialog. A default ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," will be generated if not provided."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"headingId"),": The ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," of the heading element of the Confirm Dialog. A default ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," will be generated if not provided."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"heading"),": The text of the heading element of the Confirm Dialog."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"kind"),": The kind of Confirm Dialog. The value can be either ",(0,o.kt)("inlineCode",{parentName:"li"},"non-destructive")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"destructive"),"."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"text"),": The text of the body element of the Confirm Dialog.")),(0,o.kt)("h2",{id:"accessibility"},"Accessibility"),(0,o.kt)("p",null,"The Pando Confirm Dialog is fully accessible and screen-readable through the following features:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The Confirm Dialog uses the ",(0,o.kt)("inlineCode",{parentName:"li"},"dialog")," element for native browser a11y support."),(0,o.kt)("li",{parentName:"ol"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"dialog")," element uses the role of ",(0,o.kt)("inlineCode",{parentName:"li"},"alertdialog")," to indicate to screen readers that the dialog contains important information."),(0,o.kt)("li",{parentName:"ol"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"dialog")," element uses the ",(0,o.kt)("inlineCode",{parentName:"li"},"aria-modal")," attribute to indicate to screen readers that the dialog is modal."),(0,o.kt)("li",{parentName:"ol"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"dialog")," element uses the ",(0,o.kt)("inlineCode",{parentName:"li"},"aria-labelledby")," attribute to indicate to screen readers that the dialog has a heading."),(0,o.kt)("li",{parentName:"ol"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"dialog")," element uses the ",(0,o.kt)("inlineCode",{parentName:"li"},"aria-describedby")," attribute to indicate to screen readers that the dialog has a body."),(0,o.kt)("li",{parentName:"ol"},"The Dialog API automatically focuses back on the trigger when the Dialog is closed."),(0,o.kt)("li",{parentName:"ol"},"The Dialog traps focus within the Dialog when it is open.")))}y.isMDXComponent=!0}}]);