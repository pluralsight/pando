import prettier from 'prettier'
import path from 'path'
import { appendFileSync, existsSync, mkdirSync, writeFileSync } from 'fs'
import indentObject from '../utils/indentLine'

const generatedDisclaimer = `// This file is generated by running the Vite dev sever via
// 'yarn start:sandbox' and **visiting localhost:3000**
//
// Manual changes will be lost - proceed with caution!
\n
`

const writeToFile = (outPath, convertedCss, outputType) => {
  let fileOutPath = outPath

  // Case: "SplitFile": Export input object key, values as exports to separate file
  if (outputType === 'splitFile') {
    // Create dir for generated split files
    if (path.extname(fileOutPath)) {
      fileOutPath = fileOutPath.slice(0, -3)
    } else {
      fileOutPath = path.join(fileOutPath, convertedCss.filename)
    }

    if (!existsSync(fileOutPath)) {
      mkdirSync(fileOutPath)
    }

    Object.entries(convertedCss.contents).forEach((key) => {
      const body = indentObject(key[1], 2)

      writeFileSync(path.join(fileOutPath, `${key[0]}.ts`), 'export default ')
      appendFileSync(path.join(fileOutPath, `${key[0]}.ts`), body)
    })
  } else {
    // Create file for generated simple file
    if (!path.extname(fileOutPath)) {
      fileOutPath = path.join(fileOutPath, `${convertedCss.filename}.ts`)
    }

    if (outputType === 'shakeFile') {
      // Case: "ShakeFile": Export input object key, values as exports to file
      writeFileSync(fileOutPath, '')
      Object.entries(convertedCss.contents).forEach((key) => {
        appendFileSync(
          fileOutPath,
          `export const ${key[0]} = ${JSON.stringify(key[1])};\n`
        )
      })
    } else {
      // Case: "File": Export input object to file
      const body = indentObject(convertedCss.contents, 2)
      const { imports, output } = getImports(body)

      const prettierOptions = prettier.resolveConfig.sync(fileOutPath)

      const fileContents =
        generatedDisclaimer + imports + '\nexport default' + output

      writeFileSync(fileOutPath, prettier.format(fileContents, prettierOptions))
      console.groupEnd()
    }
  }
}

function getImports(str) {
  const imports = {}
  let output = ''

  for (const line of str.split('\n')) {
    const match = line.match(/"?composes"?: "(.+) from '(.+)'"/)

    if (match) {
      const [, name, file] = match
      const moduleReg = /(\.?\.\/)+(.+)\/(.+)\.module\.css/

      let generatedImportFileName = file.replace(
        moduleReg,
        '../$1$2/generated/$3.module'
      )

      let importName
      if (generatedImportFileName in imports) {
        importName = imports[generatedImportFileName]
      } else {
        importName = file.match(moduleReg)[3]
        imports[generatedImportFileName] = importName
      }

      output += `...${importName}.${name},`
    } else {
      output += line
    }
    output += '\n'
  }

  return {
    imports:
      Object.entries(imports)
        .map(([file, name]) => `import ${name} from "${file}"`)
        .join('\n') + '\n',
    output: output,
  }
}

export default writeToFile
